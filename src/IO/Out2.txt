
The sequence is ACCEPTED

Production strings:
	program -> [compound_statement]
	compound_statement -> [{, statement_list, }]
	statement_list -> [statement_list, statement]
	statement -> [simple_statement, ;]
	simple_statement -> [write_statement]
	write_statement -> [write, (, IDENTIFIER, )]
	statement_list -> [statement_list, statement]
	statement -> [structure_statement]
	structure_statement -> [while_statement]
	while_statement -> [while, (, condition, ), compound_statement]
	compound_statement -> [{, statement_list, }]
	statement_list -> [statement_list, statement]
	statement -> [simple_statement, ;]
	simple_statement -> [assignment_statement]
	assignment_statement -> [IDENTIFIER, =, ar_expression]
	ar_expression -> [subtract_expression]
	subtract_expression -> [sub, (, ar_expression, ,, ar_expression, )]
	ar_expression -> [term]
	term -> [IDENTIFIER]
	ar_expression -> [term]
	term -> [IDENTIFIER]
	statement_list -> [statement_list, statement]
	statement -> [simple_statement, ;]
	simple_statement -> [assignment_statement]
	assignment_statement -> [IDENTIFIER, =, ar_expression]
	ar_expression -> [add_expression]
	add_expression -> [add, (, ar_expression, ,, ar_expression, )]
	ar_expression -> [term]
	term -> [IDENTIFIER]
	ar_expression -> [term]
	term -> [IDENTIFIER]
	statement_list -> [statement]
	statement -> [simple_statement, ;]
	simple_statement -> [read_statement]
	read_statement -> [read, (, IDENTIFIER, )]
	condition -> [ar_expression, relation, ar_expression]
	ar_expression -> [term]
	term -> [CONST]
	relation -> [>]
	ar_expression -> [term]
	term -> [IDENTIFIER]
	statement_list -> [statement_list, statement]
	statement -> [simple_statement, ;]
	simple_statement -> [read_statement]
	read_statement -> [read, (, IDENTIFIER, )]
	statement_list -> [statement_list, statement]
	statement -> [simple_statement, ;]
	simple_statement -> [assignment_statement]
	assignment_statement -> [IDENTIFIER, =, ar_expression]
	ar_expression -> [term]
	term -> [CONST]
	statement_list -> [statement_list, statement]
	statement -> [simple_statement, ;]
	simple_statement -> [declaration]
	declaration -> [primitive_declaration]
	primitive_declaration -> [simple_type, IDENTIFIER]
	simple_type -> [int]
	statement_list -> [statement_list, statement]
	statement -> [simple_statement, ;]
	simple_statement -> [declaration]
	declaration -> [primitive_declaration]
	primitive_declaration -> [simple_type, IDENTIFIER]
	simple_type -> [int]
	statement_list -> [statement]
	statement -> [simple_statement, ;]
	simple_statement -> [declaration]
	declaration -> [primitive_declaration]
	primitive_declaration -> [simple_type, IDENTIFIER]
	simple_type -> [int]

Productions numbers: [0, 3, 2, 4, 9, 24, 2, 5, 12, 22, 3, 2, 4, 7, 20, 41, 36, 45, 26, 45, 26, 2, 4, 7, 20, 40, 35, 45, 26, 45, 26, 1, 4, 8, 23, 34, 45, 27, 33, 45, 26, 2, 4, 8, 23, 2, 4, 7, 20, 45, 27, 2, 4, 6, 13, 15, 17, 2, 4, 6, 13, 15, 17, 1, 4, 6, 13, 15, 17]

The output tree: 
	ParsingTree.ParsingTreeRow {
				index = 0, 
				info = program, 
				leftChild = 1, 
				rightChild = -1, 
				parent = -1, 
				level = 0
		}
	ParsingTree.ParsingTreeRow {
				index = 1, 
				info = compound_statement, 
				leftChild = 2, 
				rightChild = -1, 
				parent = 0, 
				level = 1
		}
	ParsingTree.ParsingTreeRow {
				index = 2, 
				info = {, 
				leftChild = -1, 
				rightChild = 3, 
				parent = 1, 
				level = 2
		}
	ParsingTree.ParsingTreeRow {
				index = 3, 
				info = statement_list, 
				leftChild = 4, 
				rightChild = 124, 
				parent = 1, 
				level = 2
		}
	ParsingTree.ParsingTreeRow {
				index = 124, 
				info = }, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 1, 
				level = 2
		}
	ParsingTree.ParsingTreeRow {
				index = 4, 
				info = statement_list, 
				leftChild = 5, 
				rightChild = 12, 
				parent = 3, 
				level = 3
		}
	ParsingTree.ParsingTreeRow {
				index = 12, 
				info = statement, 
				leftChild = 13, 
				rightChild = -1, 
				parent = 3, 
				level = 3
		}
	ParsingTree.ParsingTreeRow {
				index = 5, 
				info = simple_statement, 
				leftChild = 6, 
				rightChild = 11, 
				parent = 4, 
				level = 4
		}
	ParsingTree.ParsingTreeRow {
				index = 11, 
				info = ;, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 4, 
				level = 4
		}
	ParsingTree.ParsingTreeRow {
				index = 13, 
				info = statement_list, 
				leftChild = 14, 
				rightChild = 78, 
				parent = 12, 
				level = 4
		}
	ParsingTree.ParsingTreeRow {
				index = 78, 
				info = statement, 
				leftChild = 79, 
				rightChild = -1, 
				parent = 12, 
				level = 4
		}
	ParsingTree.ParsingTreeRow {
				index = 6, 
				info = write_statement, 
				leftChild = 7, 
				rightChild = -1, 
				parent = 5, 
				level = 5
		}
	ParsingTree.ParsingTreeRow {
				index = 14, 
				info = structure_statement, 
				leftChild = 15, 
				rightChild = -1, 
				parent = 13, 
				level = 5
		}
	ParsingTree.ParsingTreeRow {
				index = 79, 
				info = statement_list, 
				leftChild = 80, 
				rightChild = 87, 
				parent = 78, 
				level = 5
		}
	ParsingTree.ParsingTreeRow {
				index = 87, 
				info = statement, 
				leftChild = 88, 
				rightChild = -1, 
				parent = 78, 
				level = 5
		}
	ParsingTree.ParsingTreeRow {
				index = 7, 
				info = write, 
				leftChild = -1, 
				rightChild = 8, 
				parent = 6, 
				level = 6
		}
	ParsingTree.ParsingTreeRow {
				index = 8, 
				info = (, 
				leftChild = -1, 
				rightChild = 9, 
				parent = 6, 
				level = 6
		}
	ParsingTree.ParsingTreeRow {
				index = 9, 
				info = IDENTIFIER, 
				leftChild = -1, 
				rightChild = 10, 
				parent = 6, 
				level = 6
		}
	ParsingTree.ParsingTreeRow {
				index = 10, 
				info = ), 
				leftChild = -1, 
				rightChild = -1, 
				parent = 6, 
				level = 6
		}
	ParsingTree.ParsingTreeRow {
				index = 15, 
				info = while_statement, 
				leftChild = 16, 
				rightChild = -1, 
				parent = 14, 
				level = 6
		}
	ParsingTree.ParsingTreeRow {
				index = 80, 
				info = simple_statement, 
				leftChild = 81, 
				rightChild = 86, 
				parent = 79, 
				level = 6
		}
	ParsingTree.ParsingTreeRow {
				index = 86, 
				info = ;, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 79, 
				level = 6
		}
	ParsingTree.ParsingTreeRow {
				index = 88, 
				info = statement_list, 
				leftChild = 89, 
				rightChild = 97, 
				parent = 87, 
				level = 6
		}
	ParsingTree.ParsingTreeRow {
				index = 97, 
				info = statement, 
				leftChild = 98, 
				rightChild = -1, 
				parent = 87, 
				level = 6
		}
	ParsingTree.ParsingTreeRow {
				index = 16, 
				info = while, 
				leftChild = -1, 
				rightChild = 17, 
				parent = 15, 
				level = 7
		}
	ParsingTree.ParsingTreeRow {
				index = 17, 
				info = (, 
				leftChild = -1, 
				rightChild = 18, 
				parent = 15, 
				level = 7
		}
	ParsingTree.ParsingTreeRow {
				index = 18, 
				info = condition, 
				leftChild = 19, 
				rightChild = 68, 
				parent = 15, 
				level = 7
		}
	ParsingTree.ParsingTreeRow {
				index = 68, 
				info = ), 
				leftChild = -1, 
				rightChild = 69, 
				parent = 15, 
				level = 7
		}
	ParsingTree.ParsingTreeRow {
				index = 69, 
				info = compound_statement, 
				leftChild = 70, 
				rightChild = -1, 
				parent = 15, 
				level = 7
		}
	ParsingTree.ParsingTreeRow {
				index = 81, 
				info = read_statement, 
				leftChild = 82, 
				rightChild = -1, 
				parent = 80, 
				level = 7
		}
	ParsingTree.ParsingTreeRow {
				index = 89, 
				info = simple_statement, 
				leftChild = 90, 
				rightChild = 96, 
				parent = 88, 
				level = 7
		}
	ParsingTree.ParsingTreeRow {
				index = 96, 
				info = ;, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 88, 
				level = 7
		}
	ParsingTree.ParsingTreeRow {
				index = 98, 
				info = statement_list, 
				leftChild = 99, 
				rightChild = 106, 
				parent = 97, 
				level = 7
		}
	ParsingTree.ParsingTreeRow {
				index = 106, 
				info = statement, 
				leftChild = 107, 
				rightChild = -1, 
				parent = 97, 
				level = 7
		}
	ParsingTree.ParsingTreeRow {
				index = 19, 
				info = {, 
				leftChild = -1, 
				rightChild = 20, 
				parent = 18, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 20, 
				info = statement_list, 
				leftChild = 21, 
				rightChild = 67, 
				parent = 18, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 67, 
				info = }, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 18, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 70, 
				info = ar_expression, 
				leftChild = 71, 
				rightChild = 73, 
				parent = 69, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 73, 
				info = relation, 
				leftChild = 74, 
				rightChild = 75, 
				parent = 69, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 75, 
				info = ar_expression, 
				leftChild = 76, 
				rightChild = -1, 
				parent = 69, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 82, 
				info = read, 
				leftChild = -1, 
				rightChild = 83, 
				parent = 81, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 83, 
				info = (, 
				leftChild = -1, 
				rightChild = 84, 
				parent = 81, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 84, 
				info = IDENTIFIER, 
				leftChild = -1, 
				rightChild = 85, 
				parent = 81, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 85, 
				info = ), 
				leftChild = -1, 
				rightChild = -1, 
				parent = 81, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 90, 
				info = assignment_statement, 
				leftChild = 91, 
				rightChild = -1, 
				parent = 89, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 99, 
				info = simple_statement, 
				leftChild = 100, 
				rightChild = 105, 
				parent = 98, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 105, 
				info = ;, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 98, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 107, 
				info = statement_list, 
				leftChild = 108, 
				rightChild = 115, 
				parent = 106, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 115, 
				info = statement, 
				leftChild = 116, 
				rightChild = -1, 
				parent = 106, 
				level = 8
		}
	ParsingTree.ParsingTreeRow {
				index = 21, 
				info = statement_list, 
				leftChild = 22, 
				rightChild = 39, 
				parent = 20, 
				level = 9
		}
	ParsingTree.ParsingTreeRow {
				index = 39, 
				info = statement, 
				leftChild = 40, 
				rightChild = -1, 
				parent = 20, 
				level = 9
		}
	ParsingTree.ParsingTreeRow {
				index = 71, 
				info = term, 
				leftChild = 72, 
				rightChild = -1, 
				parent = 70, 
				level = 9
		}
	ParsingTree.ParsingTreeRow {
				index = 74, 
				info = >, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 73, 
				level = 9
		}
	ParsingTree.ParsingTreeRow {
				index = 76, 
				info = term, 
				leftChild = 77, 
				rightChild = -1, 
				parent = 75, 
				level = 9
		}
	ParsingTree.ParsingTreeRow {
				index = 91, 
				info = IDENTIFIER, 
				leftChild = -1, 
				rightChild = 92, 
				parent = 90, 
				level = 9
		}
	ParsingTree.ParsingTreeRow {
				index = 92, 
				info = =, 
				leftChild = -1, 
				rightChild = 93, 
				parent = 90, 
				level = 9
		}
	ParsingTree.ParsingTreeRow {
				index = 93, 
				info = ar_expression, 
				leftChild = 94, 
				rightChild = -1, 
				parent = 90, 
				level = 9
		}
	ParsingTree.ParsingTreeRow {
				index = 100, 
				info = declaration, 
				leftChild = 101, 
				rightChild = -1, 
				parent = 99, 
				level = 9
		}
	ParsingTree.ParsingTreeRow {
				index = 108, 
				info = simple_statement, 
				leftChild = 109, 
				rightChild = 114, 
				parent = 107, 
				level = 9
		}
	ParsingTree.ParsingTreeRow {
				index = 114, 
				info = ;, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 107, 
				level = 9
		}
	ParsingTree.ParsingTreeRow {
				index = 116, 
				info = statement, 
				leftChild = 117, 
				rightChild = -1, 
				parent = 115, 
				level = 9
		}
	ParsingTree.ParsingTreeRow {
				index = 22, 
				info = simple_statement, 
				leftChild = 23, 
				rightChild = 38, 
				parent = 21, 
				level = 10
		}
	ParsingTree.ParsingTreeRow {
				index = 38, 
				info = ;, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 21, 
				level = 10
		}
	ParsingTree.ParsingTreeRow {
				index = 40, 
				info = statement_list, 
				leftChild = 41, 
				rightChild = 58, 
				parent = 39, 
				level = 10
		}
	ParsingTree.ParsingTreeRow {
				index = 58, 
				info = statement, 
				leftChild = 59, 
				rightChild = -1, 
				parent = 39, 
				level = 10
		}
	ParsingTree.ParsingTreeRow {
				index = 72, 
				info = CONST, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 71, 
				level = 10
		}
	ParsingTree.ParsingTreeRow {
				index = 77, 
				info = IDENTIFIER, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 76, 
				level = 10
		}
	ParsingTree.ParsingTreeRow {
				index = 94, 
				info = term, 
				leftChild = 95, 
				rightChild = -1, 
				parent = 93, 
				level = 10
		}
	ParsingTree.ParsingTreeRow {
				index = 101, 
				info = primitive_declaration, 
				leftChild = 102, 
				rightChild = -1, 
				parent = 100, 
				level = 10
		}
	ParsingTree.ParsingTreeRow {
				index = 109, 
				info = declaration, 
				leftChild = 110, 
				rightChild = -1, 
				parent = 108, 
				level = 10
		}
	ParsingTree.ParsingTreeRow {
				index = 117, 
				info = simple_statement, 
				leftChild = 118, 
				rightChild = 123, 
				parent = 116, 
				level = 10
		}
	ParsingTree.ParsingTreeRow {
				index = 123, 
				info = ;, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 116, 
				level = 10
		}
	ParsingTree.ParsingTreeRow {
				index = 23, 
				info = assignment_statement, 
				leftChild = 24, 
				rightChild = -1, 
				parent = 22, 
				level = 11
		}
	ParsingTree.ParsingTreeRow {
				index = 41, 
				info = simple_statement, 
				leftChild = 42, 
				rightChild = 57, 
				parent = 40, 
				level = 11
		}
	ParsingTree.ParsingTreeRow {
				index = 57, 
				info = ;, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 40, 
				level = 11
		}
	ParsingTree.ParsingTreeRow {
				index = 59, 
				info = statement, 
				leftChild = 60, 
				rightChild = -1, 
				parent = 58, 
				level = 11
		}
	ParsingTree.ParsingTreeRow {
				index = 95, 
				info = CONST, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 94, 
				level = 11
		}
	ParsingTree.ParsingTreeRow {
				index = 102, 
				info = simple_type, 
				leftChild = 103, 
				rightChild = 104, 
				parent = 101, 
				level = 11
		}
	ParsingTree.ParsingTreeRow {
				index = 104, 
				info = IDENTIFIER, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 101, 
				level = 11
		}
	ParsingTree.ParsingTreeRow {
				index = 110, 
				info = primitive_declaration, 
				leftChild = 111, 
				rightChild = -1, 
				parent = 109, 
				level = 11
		}
	ParsingTree.ParsingTreeRow {
				index = 118, 
				info = declaration, 
				leftChild = 119, 
				rightChild = -1, 
				parent = 117, 
				level = 11
		}
	ParsingTree.ParsingTreeRow {
				index = 24, 
				info = IDENTIFIER, 
				leftChild = -1, 
				rightChild = 25, 
				parent = 23, 
				level = 12
		}
	ParsingTree.ParsingTreeRow {
				index = 25, 
				info = =, 
				leftChild = -1, 
				rightChild = 26, 
				parent = 23, 
				level = 12
		}
	ParsingTree.ParsingTreeRow {
				index = 26, 
				info = ar_expression, 
				leftChild = 27, 
				rightChild = -1, 
				parent = 23, 
				level = 12
		}
	ParsingTree.ParsingTreeRow {
				index = 42, 
				info = assignment_statement, 
				leftChild = 43, 
				rightChild = -1, 
				parent = 41, 
				level = 12
		}
	ParsingTree.ParsingTreeRow {
				index = 60, 
				info = simple_statement, 
				leftChild = 61, 
				rightChild = 66, 
				parent = 59, 
				level = 12
		}
	ParsingTree.ParsingTreeRow {
				index = 66, 
				info = ;, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 59, 
				level = 12
		}
	ParsingTree.ParsingTreeRow {
				index = 103, 
				info = int, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 102, 
				level = 12
		}
	ParsingTree.ParsingTreeRow {
				index = 111, 
				info = simple_type, 
				leftChild = 112, 
				rightChild = 113, 
				parent = 110, 
				level = 12
		}
	ParsingTree.ParsingTreeRow {
				index = 113, 
				info = IDENTIFIER, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 110, 
				level = 12
		}
	ParsingTree.ParsingTreeRow {
				index = 119, 
				info = primitive_declaration, 
				leftChild = 120, 
				rightChild = -1, 
				parent = 118, 
				level = 12
		}
	ParsingTree.ParsingTreeRow {
				index = 27, 
				info = subtract_expression, 
				leftChild = 28, 
				rightChild = -1, 
				parent = 26, 
				level = 13
		}
	ParsingTree.ParsingTreeRow {
				index = 43, 
				info = IDENTIFIER, 
				leftChild = -1, 
				rightChild = 44, 
				parent = 42, 
				level = 13
		}
	ParsingTree.ParsingTreeRow {
				index = 44, 
				info = =, 
				leftChild = -1, 
				rightChild = 45, 
				parent = 42, 
				level = 13
		}
	ParsingTree.ParsingTreeRow {
				index = 45, 
				info = ar_expression, 
				leftChild = 46, 
				rightChild = -1, 
				parent = 42, 
				level = 13
		}
	ParsingTree.ParsingTreeRow {
				index = 61, 
				info = read_statement, 
				leftChild = 62, 
				rightChild = -1, 
				parent = 60, 
				level = 13
		}
	ParsingTree.ParsingTreeRow {
				index = 112, 
				info = int, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 111, 
				level = 13
		}
	ParsingTree.ParsingTreeRow {
				index = 120, 
				info = simple_type, 
				leftChild = 121, 
				rightChild = 122, 
				parent = 119, 
				level = 13
		}
	ParsingTree.ParsingTreeRow {
				index = 122, 
				info = IDENTIFIER, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 119, 
				level = 13
		}
	ParsingTree.ParsingTreeRow {
				index = 28, 
				info = sub, 
				leftChild = -1, 
				rightChild = 29, 
				parent = 27, 
				level = 14
		}
	ParsingTree.ParsingTreeRow {
				index = 29, 
				info = (, 
				leftChild = -1, 
				rightChild = 30, 
				parent = 27, 
				level = 14
		}
	ParsingTree.ParsingTreeRow {
				index = 30, 
				info = ar_expression, 
				leftChild = 31, 
				rightChild = 33, 
				parent = 27, 
				level = 14
		}
	ParsingTree.ParsingTreeRow {
				index = 33, 
				info = ,, 
				leftChild = -1, 
				rightChild = 34, 
				parent = 27, 
				level = 14
		}
	ParsingTree.ParsingTreeRow {
				index = 34, 
				info = ar_expression, 
				leftChild = 35, 
				rightChild = 37, 
				parent = 27, 
				level = 14
		}
	ParsingTree.ParsingTreeRow {
				index = 37, 
				info = ), 
				leftChild = -1, 
				rightChild = -1, 
				parent = 27, 
				level = 14
		}
	ParsingTree.ParsingTreeRow {
				index = 46, 
				info = add_expression, 
				leftChild = 47, 
				rightChild = -1, 
				parent = 45, 
				level = 14
		}
	ParsingTree.ParsingTreeRow {
				index = 62, 
				info = read, 
				leftChild = -1, 
				rightChild = 63, 
				parent = 61, 
				level = 14
		}
	ParsingTree.ParsingTreeRow {
				index = 63, 
				info = (, 
				leftChild = -1, 
				rightChild = 64, 
				parent = 61, 
				level = 14
		}
	ParsingTree.ParsingTreeRow {
				index = 64, 
				info = IDENTIFIER, 
				leftChild = -1, 
				rightChild = 65, 
				parent = 61, 
				level = 14
		}
	ParsingTree.ParsingTreeRow {
				index = 65, 
				info = ), 
				leftChild = -1, 
				rightChild = -1, 
				parent = 61, 
				level = 14
		}
	ParsingTree.ParsingTreeRow {
				index = 121, 
				info = int, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 120, 
				level = 14
		}
	ParsingTree.ParsingTreeRow {
				index = 31, 
				info = term, 
				leftChild = 32, 
				rightChild = -1, 
				parent = 30, 
				level = 15
		}
	ParsingTree.ParsingTreeRow {
				index = 35, 
				info = term, 
				leftChild = 36, 
				rightChild = -1, 
				parent = 34, 
				level = 15
		}
	ParsingTree.ParsingTreeRow {
				index = 47, 
				info = add, 
				leftChild = -1, 
				rightChild = 48, 
				parent = 46, 
				level = 15
		}
	ParsingTree.ParsingTreeRow {
				index = 48, 
				info = (, 
				leftChild = -1, 
				rightChild = 49, 
				parent = 46, 
				level = 15
		}
	ParsingTree.ParsingTreeRow {
				index = 49, 
				info = ar_expression, 
				leftChild = 50, 
				rightChild = 52, 
				parent = 46, 
				level = 15
		}
	ParsingTree.ParsingTreeRow {
				index = 52, 
				info = ,, 
				leftChild = -1, 
				rightChild = 53, 
				parent = 46, 
				level = 15
		}
	ParsingTree.ParsingTreeRow {
				index = 53, 
				info = ar_expression, 
				leftChild = 54, 
				rightChild = 56, 
				parent = 46, 
				level = 15
		}
	ParsingTree.ParsingTreeRow {
				index = 56, 
				info = ), 
				leftChild = -1, 
				rightChild = -1, 
				parent = 46, 
				level = 15
		}
	ParsingTree.ParsingTreeRow {
				index = 32, 
				info = IDENTIFIER, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 31, 
				level = 16
		}
	ParsingTree.ParsingTreeRow {
				index = 36, 
				info = IDENTIFIER, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 35, 
				level = 16
		}
	ParsingTree.ParsingTreeRow {
				index = 50, 
				info = term, 
				leftChild = 51, 
				rightChild = -1, 
				parent = 49, 
				level = 16
		}
	ParsingTree.ParsingTreeRow {
				index = 54, 
				info = term, 
				leftChild = 55, 
				rightChild = -1, 
				parent = 53, 
				level = 16
		}
	ParsingTree.ParsingTreeRow {
				index = 51, 
				info = IDENTIFIER, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 50, 
				level = 17
		}
	ParsingTree.ParsingTreeRow {
				index = 55, 
				info = IDENTIFIER, 
				leftChild = -1, 
				rightChild = -1, 
				parent = 54, 
				level = 17
		}
States

State transitions
(0, S) -> 1
(0, a) -> 2
(2, A) -> 3
(2, b) -> 4
(2, c) -> 5
(4, A) -> 6
(4, b) -> 4
(4, c) -> 5
Parsing Table: 
	Row {
		stateIndex= 0,
		action='SHIFT',
		reduceNonTerminal='null',
		reduceContent = null,
		shifts = [(S, 1), (a, 2)]
	}
	Row {
		stateIndex= 1,
		action='ACCEPT',
		reduceNonTerminal='null',
		reduceContent = null,
		shifts = null
	}
	Row {
		stateIndex= 2,
		action='SHIFT',
		reduceNonTerminal='null',
		reduceContent = null,
		shifts = [(A, 3), (b, 4), (c, 5)]
	}
	Row {
		stateIndex= 3,
		action='REDUCE',
		reduceNonTerminal='S',
		reduceContent = [a, A],
		shifts = null
	}
	Row {
		stateIndex= 4,
		action='SHIFT',
		reduceNonTerminal='null',
		reduceContent = null,
		shifts = [(A, 6), (b, 4), (c, 5)]
	}
	Row {
		stateIndex= 5,
		action='REDUCE',
		reduceNonTerminal='A',
		reduceContent = [c],
		shifts = null
	}
	Row {
		stateIndex= 6,
		action='REDUCE',
		reduceNonTerminal='A',
		reduceContent = [b, A],
		shifts = null
	}

States

State transitions
(0, S) -> 1
(0, a) -> 2
(2, A) -> 3
(2, b) -> 4
(2, c) -> 5
(4, A) -> 6
(4, b) -> 4
(4, c) -> 5
Parsing Table: 
	Row {
		stateIndex = 0,
		action ='SHIFT',
		reduceNonTerminal ='null',
		reduceContent = null,
		shifts = [(S, 1), (a, 2)]
	}
	Row {
		stateIndex = 1,
		action ='ACCEPT',
		reduceNonTerminal ='null',
		reduceContent = null,
		shifts = null
	}
	Row {
		stateIndex = 2,
		action ='SHIFT',
		reduceNonTerminal ='null',
		reduceContent = null,
		shifts = [(A, 3), (b, 4), (c, 5)]
	}
	Row {
		stateIndex = 3,
		action ='REDUCE',
		reduceNonTerminal ='S',
		reduceContent = [a, A],
		shifts = null
	}
	Row {
		stateIndex = 4,
		action ='SHIFT',
		reduceNonTerminal ='null',
		reduceContent = null,
		shifts = [(A, 6), (b, 4), (c, 5)]
	}
	Row {
		stateIndex = 5,
		action ='REDUCE',
		reduceNonTerminal ='A',
		reduceContent = [c],
		shifts = null
	}
	Row {
		stateIndex = 6,
		action ='REDUCE',
		reduceNonTerminal ='A',
		reduceContent = [b, A],
		shifts = null
	}

